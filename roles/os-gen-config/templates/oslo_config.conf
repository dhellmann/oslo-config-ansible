# Generated by os-config-gen as {{dest}}

# TODO: raise errors for invalid types

{%- set emitted_groups = [] -%}
{% macro show_group(group_name) -%}
{% if group_name not in emitted_groups -%}
[{{group_name}}]
{{emitted_groups.append(group_name)}}
{%- endif %}
{%- endmacro %}

{% macro emit_option(group_name, group, opt) -%}
{%- set group_values = config_data.get(group_name, {}) -%}
{% if config_show_defaults or 
    (opt.name in group_values and opt.default != group_values.get(opt.name)) -%}
{{ show_group(group_name) }}
{%- if config_show_help %}
# {{ opt.help|wordwrap(79, False, '\n# ') }}
{% endif %}
{% if opt.type == 'list value' -%}
{% for val in group_values.get(opt.name, opt.default or []) %}
{{opt.name}} = {{val}}
{% endfor %}
{% else -%}
{{opt.name}} = {{group_values[opt.name]|default(opt.default)}}
{% endif %}
{% endif %}
{%- endmacro %}

{% macro emit_options(group_name, group, opts) -%}
{% for opt in opts -%}
{% if opt.name in group.standard_opts -%}
{{emit_option(group_name, group, opt)}}
{%- elif group.driver_option and opt.name in group.driver_opts.get(config_data.get(group_name, {}).get(group.driver_option), []) -%}
{{emit_option(group_name, group, opt)}}
{%- elif opt.name in config_data.get(group_name, {}) -%}
{# a value was specified for the option, but the option is not standard or used by the active driver #}
{{ 'Undefined option {} in group {}. Does it belong to another driver?'.format(opt.name, group_name)|error }}
{% endif %}
{%- endfor %}
{%- endmacro %}

{# show the regular groups that are defined in the schema #}
{% for group_name, group in os_gen_config_schema['options']|dictsort -%}
{{ emit_options(group_name, group, group.opts) }}
{%- endfor %}{# groups #}

{# build the list of dynamic groups based on options declared as being owners #}
{%- set dynamic_groups = [] %}
{%- for group_name, group in os_gen_config_schema['options']|dictsort -%}
{% if group.dynamic_group_owner -%}
{{dynamic_groups.append({'owner': group.dynamic_group_owner, 'group':group})}}
{%- endif %}
{%- endfor -%}

{# show the dynamic groups that are defined by data provided by the user #}
{% for group in dynamic_groups -%}
{% if group.owner in config_data.get('DEFAULT', {}) -%}
{% for group_name in config_data.DEFAULT[group.owner] %}
{{ emit_options(group_name, group.group, group.group.opts) }}
{% endfor %}
{%- endif %}
{%- endfor %}